% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/factor_nosort.R
\name{refactor}
\alias{refactor}
\title{Refactor by integer matching levels in C++}
\usage{
refactor(x, levels, na.rm = FALSE, exclude_na = TRUE,
  validate = FALSE)
}
\arguments{
\item{exclude_na}{Simpler equivalent to \code{base::factor} exclude. By default,
\code{refactor} will not count \code{NA} as a factor level if there are \code{NA} elements
in the input data. As with \code{base::factor}, if \code{exclude_na} is \code{TRUE}, an
\code{NA} level explicitly requested in the \code{levels} argument is still dropped.}

\item{validate}{Single logical value, if \code{TRUE}, the input factor is checked
for consistency. This should almost never be a problem (i.e., for any
factors generated by R, or those carefully generated by the user). However,
invalid factor input has the possibility of breaking assumptions in the C++
code. The default is \code{FALSE}. For huge data sets, and known valid input,
skipping this check saves significant time. \code{icd::factor_is_valid} can be
used independently.}
}
\description{
Slightly slower for small factors, three times faster for one hundred million
elements with two million new levels. Three times faster for any \code{n > 1e6}.
With \code{NA} values, margin is smaller, but still beats base \code{factor}.
}
\examples{
\dontrun{
f <- factor(c(1, 2, 3))
icd:::refactor(f, c("2", "3"))
f <- factor(c(1, 2, NA))
icd:::refactor(f, c("2", "3", NA))
}
}
\keyword{internal}
\keyword{manip}
