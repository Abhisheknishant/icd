# https://docs.travis-ci.com/user/languages/r
language: r
# https://ropensci.org/blog/2016/07/12/travis-osx
# https://docs.travis-ci.com/user/ci-environment/

# for RcppEigen to compile, (but disable if brew gcc on mac to avoid conflict)
fortran: true

# os:
#   - linux
#   - osx

# dist:
#   - xenial

compiler:
  - gcc
  - clang

# may need this for clang:
# export LD_LIBRARY_PATH=/usr/local/clang/lib:$LD_LIBRARY_PATH
#
# See this for more recent compiler support than old defaults:
# https://docs.travis-ci.com/user/languages/c/
#
# and
#
# https://docs.travis-ci.com/user/languages/cpp/

# TODO: "eval"" the benchmark step to error if it fails with bad return code.
sudo: false
cache:
  - packages
  - ccache

addons:
  apt:
    packages:
      - valgrind

# don't want overhead of installing for every matrix element
# r_packages:
#   - covr

cran: https://cloud.r-project.org

warnings_are_errors: true

# try to speed up compilation time
before_install:
  # Set library directory so R CMD check finds packages installed by travis and by R itself (e.g. Rcpp rebuilt for MacOS builds)
  # https://stackoverflow.com/questions/31879011/r-cant-find-packages-installed-by-travis
  - sudo mkdir -p /usr/lib/R/library
  - echo 'R_LIBS=/usr/lib/R/library:/usr/lib/R/site-library/' > ~/.Renviron
  - sudo chmod 2777 /usr/lib/R/library
  # ready for Makevars
  - mkdir ~/.R ;
  - echo 'CXXFLAGS=-Wno-unused-parameter -Wno-unused-variable -Wno-ignored-attributes -Wno-cast-function-type' >> ~/.R/Makevars ;
  - echo 'CXX11FLAGS=-Wno-unused-parameter -Wno-unused-variable -Wno-ignored-attributes -Wno-cast-function-type' >> ~/.R/Makevars ;
  - if [[ "$TRAVIS_R_VERSION_STRING" = 'devel' ]]; then
      echo 'CFLAGS=-O0' >> ~/.R/Makevars ;
      echo 'CXXFLAGS=-O0' >> ~/.R/Makevars ;
      echo 'CXX11FLAGS=-O0' >> ~/.R/Makevars ;
      fi
  - eval "${MATRIX_EVAL}"
  - cat ~/.R/Makevars
  - Rscript -e '.libPaths()'

env:
  global:
    - _R_CHECK_CRAN_INCOMING_=FALSE
    - _R_CHECK_CRAN_INCOMING_REMOTE_=FALSE
    - _R_CHECK_FORCE_SUGGESTS_=FALSE
    - _R_CHECK_USE_INSTALL_LOG_=TRUE
    - _R_CHECK_LENGTH_1_CONDITION_="verbose,abort"
    - _R_CHECK_LENGTH_1_LOGIC2_="verbose,abort"
    - _R_CHECK_NO_STOP_ON_TEST_ERROR_=FALSE
    - _R_CHECK_COMPILATION_FLAGS_=FALSE
    - ICD_COVERAGE=false
    - ICD_MINI_BENCH=false
    - ICD_DATA_VERBOSE=true
    - ICD_DATA_OFFLINE=true
    - ICD_DATA_INTERACT=false
    # 4 is the official travis suggestion
    - OMP_NUM_THREADS=4
#    env: LINTR_COMMENT_BOT=true

matrix:
  fast_finish: false
  include:
  - r: devel
    os: linux
    dist: xenial
  - r: release
    os: linux
    dist: xenial
  - r: release
    os: osx
    # this xcode so stuff like _stdio.h are available to GCC.
    osx_image: xcode10.1
    fortran: false
    # just to avoid matrix doing this twice, state gcc here
    compiler: gcc
    # ?have to reinstall Rcpp with compiler and libc++ -> libstdc++ change
    env:
      - MATRIX_EVAL="brew install gcc && echo 'CC=gcc-8' >> ~/.R/Makevars && echo 'CXX=g++-8' >> ~/.R/Makevars && echo 'CXX11=g++-8' >> ~/.R/Makevars && Rscript -e 'install.packages(\"Rcpp\", type = \"source\")'"
      - ICD_MINI_BENCH=true
  # r-devel currently failing to download for macos, so release for now.
  # also see https://docs.travis-ci.com/user/reference/osx
  - r: release
    os: osx
    osx_image: xcode10.2
    compiler: gcc
    env:
      - MATRIX_EVAL="brew install gcc && echo 'CC=gcc-8' >> ~/.R/Makevars && echo 'CXX=g++-8' >> ~/.R/Makevars && echo 'CXX11=g++-8' >> ~/.R/Makevars && Rscript -e 'install.packages(\"Rcpp\", type = \"source\")'"
  - r: release
    os: osx
    # as of April 2019, default osx image is 9.4
    # just to avoid matrix doing this twice with same xcode binary...
    compiler: clang
  - r: oldrel
    os: linux
    dist: precise
    latex: false
    r_build_args: --no-build-vignettes --no-manual --resave-data=no
    r_check_args: --no-build-vignettes --no-vignettes --ignore-vignettes --no-codoc --no-manual
  - r: release
    os: osx
    compiler: clang
    latex: false
    r_build_args: --no-build-vignettes --no-manual --resave-data=no
    r_check_args: --no-build-vignettes --no-vignettes --ignore-vignettes --no-codoc --no-manual
    env:
    - ICD_MINI_BENCH=true
  - r: release
    os: linux
    latex: false
    r_build_args: --no-build-vignettes --no-manual --resave-data=no
    r_check_args: --no-build-vignettes --no-vignettes --ignore-vignettes --no-codoc --no-manual --use-valgrind
    env:
    - ICD_COVERAGE=true
    - ICD_MINI_BENCH=true
    - ICD_TEST_SLOW=true
  allow_failures:
  # allow any osx to fail for now: error prone tool chain
  - os: osx
  - r: oldrel
  - r: release
    os: linux
    latex: false
    r_build_args: --no-build-vignettes --no-manual --resave-data=no
    r_check_args: --no-build-vignettes --no-vignettes --ignore-vignettes --no-codoc --no-manual --use-valgrind
    env:
    - ICD_COVERAGE=true
    - ICD_MINI_BENCH=true
    - ICD_TEST_SLOW=true

before_script:
# - rm .Rinstignore  # do install everything for testing (we have source tree, so no need)
 - if [ "$TRAVIS_OS_NAME" = "osx" ]; then sed -i '' '/.*[Dd]ata.*/d' .Rbuildignore; fi
 - if [ "$TRAVIS_OS_NAME" = "linux" ]; then sed -i'' '/.*[Dd]ata.*/d' .Rbuildignore; fi
 # should fail and stop travis if the benchmarking fails.
 - if [ "ICD_MINI_BENCH" = "true" ]; then
     cd benchmarks/icd-JSS3447-replication;
     make bench3 && make replmat;
     cd ../..;
   fi

after_success:
 - if [ "$ICD_COVERAGE" = "true" ]; then
     Rscript -e "install.packages('covr'); covr::codecov(quiet = FALSE)"; fi
# - if [ "$LINTR_COMMENT_BOT" = "true" ]; then
#     Rscript -e "lintr::lint_package()"; fi

notifications:
  email:
    on_success: change
    on_failure: change
